if ststements:
 else if - elif - avoid excessive indentation
 0 or more elif - possible
 else - optional
 if...elif...elif... - alternate for switch or case

comparing the same value to several constants, or checking for specific types or attributes - match

for Statements:
Rather than always iterating over an arithmetic progression of numbers (like in Pascal),
 or giving the user the ability to define both the iteration step and halting condition (as C),
 Python’s for statement iterates over the items of any sequence (a list or a string),
  in the order that they appear in the sequence

Code that modifies a collection while iterating over that same collection can be tricky to get right.
 Instead, it is usually more straight-forward to loop over a copy of the collection 
 or to create a new collection.

range():
iterate over a sequence of numbers
range(start, stop, step)
ex: range(10) - 0 to 9 
To iterate over the indices of a sequence, you can combine range() and len() .

enumerate(iterable, start=0):
 iterable must be a sequence, an iterator, or some other object which supports iteration.
 enumerate() returns a tuple containing a count (from start which defaults to 0)
  and the values obtained from iterating over iterable.

range()-generates numbers on-the-fly rather than storing them in memory as a list, 
it's memory-efficient, especially for large ranges.

break:
  breaks out of the innermost enclosing loop(for/while)
continue:
     statement continues with the next iteration of the loop

else Clauses on Loops:
If the loop finishes without executing the break, the else clause executes.
for: else clause is executed 
    1.after the loop finishes its final iteration, 
    2. that is, if no break occurred.
while: executed after the loop’s condition becomes false.

else clause is not executed :
    1.if the loop was terminated by a break
    2.return
    3.or a raised exception
if: 
1.a try statement’s else clause runs when no exception occurs, 
2.and a loop’s else clause runs when no break occurs.

pass:
does nothing. 
used when a statement is required syntactically but the program requires no action

match:
statement takes an expression and compares its value to successive patterns given as one or more case blocks
